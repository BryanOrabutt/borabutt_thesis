#!/usr/bin/octave -qf

%
% This Octave script will analyze a file containing the results of a monte carlo analysis.
%
% This script should be called with three arguments:
%
% (1)   Name of data file to process (just give the root .. extension is .dat)
% (2)   Number of monte carlo runs which are contained in the file.
%
%
% example usage 
%
% analyze_dac   dac_3741  4
%

%
% I assume that the first line of data file contains
% the title I would like displayed on the associated
% linearity plot.  Second line contains a timestamp.
% Third line is the header generated by the verilogA code.
% Data begins on the fourth line.
%

% Get name of data file

arg_list = argv () ;
rootname = arg_list{1} ;

% Number of Monte Carlo runs

num_of_runs = str2num(arg_list{2}) ;

% Create the filename we want to read
% Assume it is in the results directory

filename = ['../results'  rootname  '.dat'] ;

%
% Open the file
%

fid = fopen(filename, 'rt') ; 

% Start reading data from the fourth line

data = dlmread(filename, '\t', 3, 0) 

%
%  x-data (time) in column 1 and y-data (output voltage) in column 2
%
x = 1.0e9 * data(:,1) ;
y = data(:,2) ;
n = length(x) ;

% Exclude m points from start and the end of the data when
% doing the line fit

xfit = x(m1:m2) ;
yfit = y(m1:m2) ;

%
% Asumme x-data lines on a line whose slope is c2 and intercept is c1
%
% Create y = c1 + c2 * x
% Y = c * X
%

% Let p be the number of points in the fit

p = m2 - m1 + 1 ;

X = [ones(p, 1) xfit];

% Calculate coefficient vector (slope and intercept)
% 

c = (pinv(X'*X))*X'*yfit ;
intercept = c(1) 
slope = c(2) 

% Plot the fitted equation we got from the regression
% X should now be all of the data

X = [ones(n, 1) x] ;

h = figure('name','TVC Linearity Plot','numbertitle','off') ;

% ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
% Plot the original data and best fit line
% ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

subplot(3,1,1) ;
plot(x, y, 'r.','MarkerSize',15); 
grid on

xlabel('Time Between Start and Stop (ns)'); 
ylabel('TVC Output (V)');

hold on ; 

plot(X(:,2), X*c, '-', "linewidth", 4) ;
title(tline) ;


% ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
% Plot the residuals
% ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

% Compute the residuals

res =  X*c - y ;

% Convert the residual voltage to an energy

res = res ./ slope ;

subplot(3,1,2) ;
plot(X(:,2), res, '-', "linewidth", 4) ;
%axis([0 700 -8 +8]) ;
xlim("auto") ;
ylim("auto") ;
grid on
xlabel('Time Between Start and Stop (ns)'); % Set the x-axis label
ylabel('INL (ns)'); % Set the y-axis label

% ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
% Differential non-linearity
% ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

y_copy = y(1:n-1) ;
y_shifted = y(2:n) ;
y_diff = y_shifted - y_copy ;
y_diff = y_diff ./ slope ;
y_diff(end + 1) = 0 ;
y_diff = y_diff - (range / 25) ;
subplot(3,1,3) ;
plot(X(:,2), y_diff, '-', "linewidth", 4) ;
% axis([0 700 -0.5 +0.5]) ;
xlim("auto") ;
ylim("auto") ;
grid on
xlabel('Time Between Start and Stop (ns)'); % Set the x-axis label
ylabel('DNL (ns/ ns)'); % Set the y-axis label


warning("off")
print(h,'-dpdf','-color', [ './pdf/' rootname '.pdf']) ;

%print(h,'-dpdf','-color', [ rootname '.pdf']) ;

hold off 
exit

